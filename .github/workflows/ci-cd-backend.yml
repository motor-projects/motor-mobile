name: CI/CD - Backend

on:
  push:
    branches: [main, develop]
    paths:
      - 'motor-backend/**'
      - 'motor-shared/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'motor-backend/**'
      - 'motor-shared/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: motor-projects/backend

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            motor-backend/package-lock.json
            motor-shared/package-lock.json

      - name: Install shared dependencies
        run: |
          cd motor-shared
          npm ci
          npm run build

      - name: Install backend dependencies
        run: |
          cd motor-backend
          npm ci

      - name: Run linting
        run: |
          cd motor-backend
          npm run lint

      - name: Run type checking
        run: |
          cd motor-backend
          npm run type-check || echo "No type-check script found"

      - name: Run tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://test:test@localhost:27017/motor_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
        run: |
          cd motor-backend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./motor-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd motor-backend
          npm ci --audit

      - name: Run security audit
        run: |
          cd motor-backend
          npm audit --audit-level moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=motor-backend --file=motor-backend/package.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./motor-backend
          file: ./motor-backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_USER }}
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /opt/motor-projects
            export IMAGE_TAG=${{ github.sha }}
            docker-compose -f docker-compose.staging.yml pull backend
            docker-compose -f docker-compose.staging.yml up -d backend
            docker system prune -f
          EOF
          
          rm -f deploy_key

      - name: Run health check
        run: |
          sleep 30
          curl -f https://api-staging.motor-projects.com/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
          DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /opt/motor-projects
            export IMAGE_TAG=${{ github.sha }}
            
            # Blue-Green deployment
            docker-compose -f docker-compose.production.yml pull backend
            docker-compose -f docker-compose.production.yml up -d backend-green
            
            # Health check
            sleep 30
            if curl -f http://backend-green:5000/health; then
              # Switch traffic
              docker-compose -f docker-compose.production.yml stop backend-blue
              docker-compose -f docker-compose.production.yml rm -f backend-blue
              docker-compose -f docker-compose.production.yml up -d backend-blue
              docker-compose -f docker-compose.production.yml stop backend-green
            else
              echo "Health check failed, rolling back"
              docker-compose -f docker-compose.production.yml stop backend-green
              exit 1
            fi
            
            docker system prune -f
          EOF
          
          rm -f deploy_key

      - name: Run production health check
        run: |
          sleep 30
          curl -f https://api.motor-projects.com/health || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()