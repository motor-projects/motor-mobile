name: CI/CD - Web Frontend

on:
  push:
    branches: [main, develop]
    paths:
      - 'motor-web-frontend/**'
      - 'motor-shared/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'motor-web-frontend/**'
      - 'motor-shared/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: motor-projects/web-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            motor-web-frontend/package-lock.json
            motor-shared/package-lock.json

      - name: Install shared dependencies
        run: |
          cd motor-shared
          npm ci
          npm run build

      - name: Install frontend dependencies
        run: |
          cd motor-web-frontend
          npm ci

      - name: Run linting
        run: |
          cd motor-web-frontend
          npm run lint

      - name: Run type checking
        run: |
          cd motor-web-frontend
          npm run type-check

      - name: Run tests
        run: |
          cd motor-web-frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./motor-web-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build application
        env:
          VITE_API_BASE_URL: https://api-staging.motor-projects.com
        run: |
          cd motor-web-frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: motor-web-frontend/dist/
          retention-days: 1

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: motor-web-frontend/dist/

      - name: Serve static files
        run: |
          npx serve -s motor-web-frontend/dist -p 3000 &
          sleep 5

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd motor-web-frontend
          npm ci --audit

      - name: Run security audit
        run: |
          cd motor-web-frontend
          npm audit --audit-level moderate

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=motor-web-frontend --file=motor-web-frontend/package.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./motor-web-frontend
          file: ./motor-web-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_API_BASE_URL=${{ github.ref == 'refs/heads/main' && 'https://api.motor-projects.com' || 'https://api-staging.motor-projects.com' }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        env:
          DEPLOY_HOST: ${{ secrets.STAGING_HOST }}
          DEPLOY_USER: ${{ secrets.STAGING_USER }}
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /opt/motor-projects
            docker-compose -f docker-compose.staging.yml pull web-frontend
            docker-compose -f docker-compose.staging.yml up -d web-frontend
            docker system prune -f
          EOF
          
          rm -f deploy_key

      - name: Run E2E tests
        run: |
          sleep 30
          curl -f https://staging.motor-projects.com || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production
        env:
          DEPLOY_HOST: ${{ secrets.PRODUCTION_HOST }}
          DEPLOY_USER: ${{ secrets.PRODUCTION_USER }}
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          
          ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
            cd /opt/motor-projects
            docker-compose -f docker-compose.production.yml pull web-frontend
            docker-compose -f docker-compose.production.yml up -d web-frontend
            docker system prune -f
          EOF
          
          rm -f deploy_key

      - name: Run production health check
        run: |
          sleep 30
          curl -f https://motor-projects.com || exit 1

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()